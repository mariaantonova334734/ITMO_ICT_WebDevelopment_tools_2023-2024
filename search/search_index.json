{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u0426\u0435\u043b\u044c \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u041d\u0430\u0443\u0447\u0438\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b (\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043b\u044e\u0434\u0435\u0439 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0443) \u0417\u0430\u0434\u0430\u0447\u0430 - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0435\u0431-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043b\u044e\u0434\u044f\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438. \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u0438, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u043d\u0430\u0432\u044b\u043a\u0438, \u043e\u043f\u044b\u0442 \u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043a\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u0438, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0435\u0431\u0435, \u0441\u0432\u043e\u0438\u0445 \u043d\u0430\u0432\u044b\u043a\u0430\u0445, \u043e\u043f\u044b\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f\u0445 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c. \u041f\u043e\u0438\u0441\u043a \u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0435\u0432, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043d\u0430\u0432\u044b\u043a\u0438, \u043e\u043f\u044b\u0442, \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u0438 \u0442.\u0434. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u0438 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0438\u0445 \u0446\u0435\u043b\u0438, \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0438 \u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432. \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0441\u0440\u043e\u043a\u043e\u0432, \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447, \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430 \u0438 \u0442.\u0434. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 (\u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442) \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT-\u0442\u043e\u043a\u0435\u043d\u0443 \u0425\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439 models.py from sqlmodel import SQLModel, Field, Relationship import typing class SkillsProfiles(SQLModel, table=True): id: int = Field(default=None, primary_key=True) profile_id: typing.Optional[int] = Field(default=None, foreign_key=\"profile.id\") skill_id: typing.Optional[int] = Field(default=None, foreign_key=\"skill.id\") class SkillsProjects(SQLModel, table=True): id: int = Field(default=None, primary_key=True) project_id: typing.Optional[int] = Field(default=None, foreign_key=\"project.id\") skill_id: typing.Optional[int] = Field(default=None, foreign_key=\"skill.id\") class Skill(SQLModel, table=True): id: int = Field(default=None, primary_key=True) name: str description: str = \"\" skills_profiles: typing.Optional[typing.List[\"Profile\"]] = Relationship( back_populates=\"own_skills\", link_model=SkillsProfiles ) skills_projects: typing.Optional[typing.List[\"Project\"]] = Relationship( back_populates=\"requirements_skills\", link_model=SkillsProjects ) class User(SQLModel, table=True): id: int = Field(default=None, primary_key=True) username: str password: str is_active: bool = Field(default=True) user_profile: typing.Optional[\"Profile\"] = Relationship( back_populates=\"user\", sa_relationship_kwargs={'uselist': False} ) class Team(SQLModel, table=True): id: int = Field(default=None, primary_key=True) name: str description: str creator_id: int is_active: bool = Field(default=True) projects_team: typing.Optional[typing.List[\"Project\"]] = Relationship(back_populates=\"team_project\") profiles_team: typing.Optional[typing.List[\"Profile\"]] = Relationship(back_populates=\"team_profile\") class Project(SQLModel, table=True): id: int = Field(default=None, primary_key=True) team_id: int = Field(default=None, foreign_key=\"team.id\") team_project: Team = Relationship(back_populates=\"projects_team\") goal: str is_active: bool = Field(default=True) requirements_skills: typing.Optional[typing.List[Skill]] = Relationship( back_populates=\"skills_projects\", link_model=SkillsProjects ) results: str class Profile(SQLModel, table=True): id: int = Field(default=None, primary_key=True) user_id: typing.Optional[int] = Field(default=None, foreign_key=\"user.id\") user: typing.Optional[User] = Relationship(back_populates=\"user_profile\") is_active: bool = Field(default=True) description: typing.Optional[str] team_id: typing.Optional[int] = Field(default=None, foreign_key=\"team.id\") team_profile: typing.Optional[Team] = Relationship(back_populates=\"profiles_team\") own_skills: typing.Optional[typing.List[Skill]] = Relationship( back_populates=\"skills_profiles\", link_model=SkillsProfiles, sa_relationship_kwargs={'uselist': True} ) projects_interests: typing.Optional[str] experience: typing.Optional[str] profile.py import typing from fastapi import APIRouter, Depends from src.dependencies import get_current_user from src.settings.connection import get_session from src import models from src.schemas.profile import ProfileUpdate from src.adapters.db import SqlalchemyWorker from sqlmodel import select profile_route = APIRouter(prefix=\"/profile\", tags=[\"profile\"]) @profile_route.patch(\"/{id}\", response_model=models.Profile, status_code=200) def update_profile( profile_id: int, profile_update: ProfileUpdate, session=Depends(get_session), user=Depends(get_current_user) ) -> models.Profile: sqlalchemy_worker = SqlalchemyWorker(session) profile_query = select(models.Profile).where(models.Profile.id == profile_id, models.Profile.is_active == True) skills = profile_update.skills delattr(profile_update, \"skills\") updated_profile = sqlalchemy_worker.patch_object(profile_query, profile_update) skills_query = select(models.Skill).where(models.Skill.id.in_(skills)) skills_profile = sqlalchemy_worker.get_objects(skills_query) for skill_profile in skills_profile: if skill_profile not in updated_profile.own_skills: updated_profile.own_skills.append(skill_profile) session.commit() profile = session.refresh(updated_profile) return profile @profile_route.delete(\"/{id}\", status_code=204) def deactivate_profile(profile_id: int, session=Depends(get_session), user=Depends(get_current_user)) -> None: query = select(models.Profile).where(models.Profile.id == profile_id, models.Profile.is_active == True) SqlalchemyWorker(session).delete_object(query) @profile_route.get(\"/{id}\", response_model=models.Profile) def get_profile(profile_id: int, session=Depends(get_session), user=Depends(get_current_user)) -> models.Profile: query = (select(models.Profile) .where(models.Profile.id == profile_id, models.Profile.is_active == True)) return SqlalchemyWorker(session).get_object(query) @profile_route.get(\"/\", response_model=typing.List[models.Profile]) def get_profiles(session=Depends(get_session), search: typing.Optional[str] = None, user=Depends(get_current_user)) -> typing.List[models.Profile]: query = (select(models.Profile) .where(models.Profile.own_skills.any(models.Skill.name == search))) if search else select(models.Profile) return SqlalchemyWorker(session).get_objects(query) project.py import typing from fastapi import APIRouter, Depends from sqlmodel import select from src.adapters.db import SqlalchemyWorker from src.dependencies import get_current_user from src.models import Project, Team, Skill, Profile from src.schemas.project import ProjectCreate from src.settings.connection import get_session project_route = APIRouter(prefix=\"/project\", tags=[\"project\"]) @project_route.post(\"/\", response_model=Project, status_code=201) async def create_project( created_project: ProjectCreate, session=Depends(get_session), user=Depends(get_current_user) ) -> Project: sqlalchemy_worker = SqlalchemyWorker(session) team_query = select(Team).where(Team.id == created_project.team_id, Team.is_active == True) sqlalchemy_worker.get_object(team_query) project = Project.model_validate(created_project) return sqlalchemy_worker.create_object(project) @project_route.patch(\"/{id}\", response_model=Project) async def update_project( project_id: int, created_project: ProjectCreate, session=Depends(get_session), user=Depends(get_current_user) ) -> Project: sqlalchemy_worker = SqlalchemyWorker(session) query = select(Project).where(Project.id == project_id, Project.is_active == True) team_query = select(Team).where(Team.id == created_project.team_id, Team.is_active == True) sqlalchemy_worker.get_object(team_query) return SqlalchemyWorker(session).patch_object(query, created_project) @project_route.delete(\"/{id}\", status_code=204) async def delete_project(project_id: int, session=Depends(get_session), user=Depends(get_current_user)) -> None: query = select(Project).where(Project.id == project_id, Project.is_active == True) SqlalchemyWorker(session).delete_object(query) @project_route.get(\"/{id}\") async def get_project(project_id: int, session=Depends(get_session), user=Depends(get_current_user)) -> dict: sqlalchemy_worker = SqlalchemyWorker(session) query = select(Project).where(Project.id == project_id, Project.is_active == True) project = sqlalchemy_worker.get_object(query) project_members_query = select(Profile).where(project.team_id == Profile.team_id) project_members = sqlalchemy_worker.get_objects(project_members_query) project = project.model_dump() project[\"members\"] = project_members return project @project_route.get(\"/\", response_model=typing.List[Project]) async def get_projects( session=Depends(get_session), search: typing.Optional[str] = None, user=Depends(get_current_user) ) -> typing.List[Project]: query = select(Project).where(Project.requirements_skills.any(Skill.name == search)) if search else select(Project) return SqlalchemyWorker(session).get_objects(query) team.py import typing from fastapi import APIRouter, Depends from starlette.responses import JSONResponse from src.dependencies import get_current_user from src.models import Team from src.settings.connection import get_session from src.adapters.db import SqlalchemyWorker from src.schemas.team import TeamUpdate, TeamCreate, TeamParticipantUpdate from sqlmodel import select from src import models team_route = APIRouter(prefix=\"/team\", tags=[\"team\"]) @team_route.post(\"/\", response_model=Team) async def create_team(created_team: TeamCreate, session=Depends(get_session), user=Depends(get_current_user)) -> Team: created_team.creator_id = user.id team = Team.model_validate(created_team) return SqlalchemyWorker(session).create_object(team) @team_route.get(\"/\", response_model=typing.List[Team]) async def get_teams(session=Depends(get_session), user=Depends(get_current_user)) -> typing.List[Team]: query = select(models.Team) return SqlalchemyWorker(session).get_objects(query) @team_route.get(\"/{id}\", response_model=Team) async def get_team(team_id: int, session=Depends(get_session), user=Depends(get_current_user)) -> Team: query = select(models.Team).where(models.Team.id == team_id) return SqlalchemyWorker(session).get_object(query) @team_route.patch(\"/{id}\", response_model=Team) async def update_team( team_id: int, updated_team: TeamUpdate, session=Depends(get_session), user=Depends(get_current_user) ) -> Team: query = select(models.Team).where(models.Team.id == team_id) return SqlalchemyWorker(session).patch_object(query, updated_team) @team_route.delete(\"/{id}\") async def delete_team(team_id: int, session=Depends(get_session), user=Depends(get_current_user)) -> None: query = select(models.Team).where(models.Team.id == team_id) SqlalchemyWorker(session).delete_object(query) @team_route.post(\"/participant/add\") async def add_participant( updated_participant: TeamParticipantUpdate, session=Depends(get_session) ): sqlalchemy_worker = SqlalchemyWorker(session) profile_query = ( select(models.Profile) .where(models.Profile.id == updated_participant.profile_id, models.Profile.is_active == True)) team_query = select(models.Team).where(models.Team.id == updated_participant.team_id) team = sqlalchemy_worker.get_object(team_query) profile = sqlalchemy_worker.get_object(profile_query) profile.team_id = team.id session.commit() return JSONResponse(status_code=200, content={\"message\": f\"Participant {profile.user.username} add\"}) @team_route.post(\"/participant/delete\", status_code=200) async def delete_participant( updated_participant: TeamParticipantUpdate, session=Depends(get_session) ): sqlalchemy_worker = SqlalchemyWorker(session) profile_query = ( select(models.Profile) .where(models.Profile.id == updated_participant.profile_id, models.Profile.is_active == True)) team_query = select(models.Team).where(models.Team.id == updated_participant.team_id) team = sqlalchemy_worker.get_object(team_query) profile = sqlalchemy_worker.get_object(profile_query) profile.team_id = None session.commit() return JSONResponse(status_code=200, content={\"message\": f\"Participant {profile.user.username} deleted\"}) auth.py import datetime import os import fastapi from fastapi import HTTPException from fastapi.security import HTTPBearer from passlib.context import CryptContext import jwt from src.settings.config import config class AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=['bcrypt']) secret = config.hash_password_secret def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, pwd, hashed_pwd): return self.pwd_context.verify(pwd, hashed_pwd) def encode_token(self, user_id): payload = { 'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=8), 'iat': datetime.datetime.utcnow(), 'sub': user_id } return jwt.encode(payload, self.secret, algorithm='HS256') def decode_token(self, token): try: payload = jwt.decode(token, self.secret, algorithms=['HS256']) return payload['sub'] except jwt.ExpiredSignatureError: raise HTTPException(status_code=401, detail='Expired signature') except jwt.InvalidTokenError: raise HTTPException(status_code=401, detail='Invalid token') def auth_wrapper(self, token: str = fastapi.Header(\"token\")): return self.decode_token(token) db.py import typing from fastapi import HTTPException class SqlalchemyWorker: def __init__(self, session): self.session = session def create_object(self, created_object: typing.Any): self.session.add(created_object) self.session.commit() self.session.refresh(created_object) return created_object def get_object(self, query): response = self.session.exec(query).first() if not response: raise HTTPException(status_code=404, detail=\"Object not found\") return response def get_objects(self, query): return self.session.exec(query).all() def patch_object(self, query, updated_data): get_object = self.get_object(query) profile_data = updated_data.model_dump(exclude_unset=True) for key, value in profile_data.items(): setattr(get_object, key, value) self.session.add(get_object) self.session.commit() self.session.refresh(get_object) return get_object def delete_object(self, query): get_object = self.get_object(query) get_object.is_active = False self.session.commit() \u0421\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 - https://github.com/mariaantonova334734/ITMO_ICT_WebDevelopment_tools_2023-2024/tree/main/students/K33422/practical_works/pr%201.1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 - https://github.com/mariaantonova334734/ITMO_ICT_WebDevelopment_tools_2023-2024/tree/main/students/K33422/practical_works/pr%201.2 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 - https://github.com/mariaantonova334734/ITMO_ICT_WebDevelopment_tools_2023-2024/tree/main/students/K33422/practical_works/pr%201.3 \u0412\u044b\u0432\u043e\u0434 \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u043d\u0430\u0432\u044b\u043a\u0438 \u043f\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI. \u0411\u044b\u043b \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u043e\u043f\u044b\u0442 \u043f\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043b\u044e\u0434\u0435\u0439 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0443.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"#1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"#_1","text":"\u041d\u0430\u0443\u0447\u0438\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a.","title":"\u0426\u0435\u043b\u044c \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"#_2","text":"\u0417\u0430\u0434\u0430\u0447\u0430 - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0435\u0431-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043b\u044e\u0434\u044f\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438. \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u0438, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u043d\u0430\u0432\u044b\u043a\u0438, \u043e\u043f\u044b\u0442 \u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043a\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u0438, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0435\u0431\u0435, \u0441\u0432\u043e\u0438\u0445 \u043d\u0430\u0432\u044b\u043a\u0430\u0445, \u043e\u043f\u044b\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f\u0445 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c. \u041f\u043e\u0438\u0441\u043a \u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0435\u0432, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043d\u0430\u0432\u044b\u043a\u0438, \u043e\u043f\u044b\u0442, \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u0438 \u0442.\u0434. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u0438 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0438\u0445 \u0446\u0435\u043b\u0438, \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0438 \u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432. \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0441\u0440\u043e\u043a\u043e\u0432, \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447, \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430 \u0438 \u0442.\u0434.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b (\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043b\u044e\u0434\u0435\u0439 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0443)"},{"location":"#_3","text":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT-\u0442\u043e\u043a\u0435\u043d\u0443 \u0425\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 (\u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442)"},{"location":"#modelspy","text":"from sqlmodel import SQLModel, Field, Relationship import typing class SkillsProfiles(SQLModel, table=True): id: int = Field(default=None, primary_key=True) profile_id: typing.Optional[int] = Field(default=None, foreign_key=\"profile.id\") skill_id: typing.Optional[int] = Field(default=None, foreign_key=\"skill.id\") class SkillsProjects(SQLModel, table=True): id: int = Field(default=None, primary_key=True) project_id: typing.Optional[int] = Field(default=None, foreign_key=\"project.id\") skill_id: typing.Optional[int] = Field(default=None, foreign_key=\"skill.id\") class Skill(SQLModel, table=True): id: int = Field(default=None, primary_key=True) name: str description: str = \"\" skills_profiles: typing.Optional[typing.List[\"Profile\"]] = Relationship( back_populates=\"own_skills\", link_model=SkillsProfiles ) skills_projects: typing.Optional[typing.List[\"Project\"]] = Relationship( back_populates=\"requirements_skills\", link_model=SkillsProjects ) class User(SQLModel, table=True): id: int = Field(default=None, primary_key=True) username: str password: str is_active: bool = Field(default=True) user_profile: typing.Optional[\"Profile\"] = Relationship( back_populates=\"user\", sa_relationship_kwargs={'uselist': False} ) class Team(SQLModel, table=True): id: int = Field(default=None, primary_key=True) name: str description: str creator_id: int is_active: bool = Field(default=True) projects_team: typing.Optional[typing.List[\"Project\"]] = Relationship(back_populates=\"team_project\") profiles_team: typing.Optional[typing.List[\"Profile\"]] = Relationship(back_populates=\"team_profile\") class Project(SQLModel, table=True): id: int = Field(default=None, primary_key=True) team_id: int = Field(default=None, foreign_key=\"team.id\") team_project: Team = Relationship(back_populates=\"projects_team\") goal: str is_active: bool = Field(default=True) requirements_skills: typing.Optional[typing.List[Skill]] = Relationship( back_populates=\"skills_projects\", link_model=SkillsProjects ) results: str class Profile(SQLModel, table=True): id: int = Field(default=None, primary_key=True) user_id: typing.Optional[int] = Field(default=None, foreign_key=\"user.id\") user: typing.Optional[User] = Relationship(back_populates=\"user_profile\") is_active: bool = Field(default=True) description: typing.Optional[str] team_id: typing.Optional[int] = Field(default=None, foreign_key=\"team.id\") team_profile: typing.Optional[Team] = Relationship(back_populates=\"profiles_team\") own_skills: typing.Optional[typing.List[Skill]] = Relationship( back_populates=\"skills_profiles\", link_model=SkillsProfiles, sa_relationship_kwargs={'uselist': True} ) projects_interests: typing.Optional[str] experience: typing.Optional[str]","title":"models.py"},{"location":"#profilepy","text":"import typing from fastapi import APIRouter, Depends from src.dependencies import get_current_user from src.settings.connection import get_session from src import models from src.schemas.profile import ProfileUpdate from src.adapters.db import SqlalchemyWorker from sqlmodel import select profile_route = APIRouter(prefix=\"/profile\", tags=[\"profile\"]) @profile_route.patch(\"/{id}\", response_model=models.Profile, status_code=200) def update_profile( profile_id: int, profile_update: ProfileUpdate, session=Depends(get_session), user=Depends(get_current_user) ) -> models.Profile: sqlalchemy_worker = SqlalchemyWorker(session) profile_query = select(models.Profile).where(models.Profile.id == profile_id, models.Profile.is_active == True) skills = profile_update.skills delattr(profile_update, \"skills\") updated_profile = sqlalchemy_worker.patch_object(profile_query, profile_update) skills_query = select(models.Skill).where(models.Skill.id.in_(skills)) skills_profile = sqlalchemy_worker.get_objects(skills_query) for skill_profile in skills_profile: if skill_profile not in updated_profile.own_skills: updated_profile.own_skills.append(skill_profile) session.commit() profile = session.refresh(updated_profile) return profile @profile_route.delete(\"/{id}\", status_code=204) def deactivate_profile(profile_id: int, session=Depends(get_session), user=Depends(get_current_user)) -> None: query = select(models.Profile).where(models.Profile.id == profile_id, models.Profile.is_active == True) SqlalchemyWorker(session).delete_object(query) @profile_route.get(\"/{id}\", response_model=models.Profile) def get_profile(profile_id: int, session=Depends(get_session), user=Depends(get_current_user)) -> models.Profile: query = (select(models.Profile) .where(models.Profile.id == profile_id, models.Profile.is_active == True)) return SqlalchemyWorker(session).get_object(query) @profile_route.get(\"/\", response_model=typing.List[models.Profile]) def get_profiles(session=Depends(get_session), search: typing.Optional[str] = None, user=Depends(get_current_user)) -> typing.List[models.Profile]: query = (select(models.Profile) .where(models.Profile.own_skills.any(models.Skill.name == search))) if search else select(models.Profile) return SqlalchemyWorker(session).get_objects(query)","title":"profile.py"},{"location":"#projectpy","text":"import typing from fastapi import APIRouter, Depends from sqlmodel import select from src.adapters.db import SqlalchemyWorker from src.dependencies import get_current_user from src.models import Project, Team, Skill, Profile from src.schemas.project import ProjectCreate from src.settings.connection import get_session project_route = APIRouter(prefix=\"/project\", tags=[\"project\"]) @project_route.post(\"/\", response_model=Project, status_code=201) async def create_project( created_project: ProjectCreate, session=Depends(get_session), user=Depends(get_current_user) ) -> Project: sqlalchemy_worker = SqlalchemyWorker(session) team_query = select(Team).where(Team.id == created_project.team_id, Team.is_active == True) sqlalchemy_worker.get_object(team_query) project = Project.model_validate(created_project) return sqlalchemy_worker.create_object(project) @project_route.patch(\"/{id}\", response_model=Project) async def update_project( project_id: int, created_project: ProjectCreate, session=Depends(get_session), user=Depends(get_current_user) ) -> Project: sqlalchemy_worker = SqlalchemyWorker(session) query = select(Project).where(Project.id == project_id, Project.is_active == True) team_query = select(Team).where(Team.id == created_project.team_id, Team.is_active == True) sqlalchemy_worker.get_object(team_query) return SqlalchemyWorker(session).patch_object(query, created_project) @project_route.delete(\"/{id}\", status_code=204) async def delete_project(project_id: int, session=Depends(get_session), user=Depends(get_current_user)) -> None: query = select(Project).where(Project.id == project_id, Project.is_active == True) SqlalchemyWorker(session).delete_object(query) @project_route.get(\"/{id}\") async def get_project(project_id: int, session=Depends(get_session), user=Depends(get_current_user)) -> dict: sqlalchemy_worker = SqlalchemyWorker(session) query = select(Project).where(Project.id == project_id, Project.is_active == True) project = sqlalchemy_worker.get_object(query) project_members_query = select(Profile).where(project.team_id == Profile.team_id) project_members = sqlalchemy_worker.get_objects(project_members_query) project = project.model_dump() project[\"members\"] = project_members return project @project_route.get(\"/\", response_model=typing.List[Project]) async def get_projects( session=Depends(get_session), search: typing.Optional[str] = None, user=Depends(get_current_user) ) -> typing.List[Project]: query = select(Project).where(Project.requirements_skills.any(Skill.name == search)) if search else select(Project) return SqlalchemyWorker(session).get_objects(query)","title":"project.py"},{"location":"#teampy","text":"import typing from fastapi import APIRouter, Depends from starlette.responses import JSONResponse from src.dependencies import get_current_user from src.models import Team from src.settings.connection import get_session from src.adapters.db import SqlalchemyWorker from src.schemas.team import TeamUpdate, TeamCreate, TeamParticipantUpdate from sqlmodel import select from src import models team_route = APIRouter(prefix=\"/team\", tags=[\"team\"]) @team_route.post(\"/\", response_model=Team) async def create_team(created_team: TeamCreate, session=Depends(get_session), user=Depends(get_current_user)) -> Team: created_team.creator_id = user.id team = Team.model_validate(created_team) return SqlalchemyWorker(session).create_object(team) @team_route.get(\"/\", response_model=typing.List[Team]) async def get_teams(session=Depends(get_session), user=Depends(get_current_user)) -> typing.List[Team]: query = select(models.Team) return SqlalchemyWorker(session).get_objects(query) @team_route.get(\"/{id}\", response_model=Team) async def get_team(team_id: int, session=Depends(get_session), user=Depends(get_current_user)) -> Team: query = select(models.Team).where(models.Team.id == team_id) return SqlalchemyWorker(session).get_object(query) @team_route.patch(\"/{id}\", response_model=Team) async def update_team( team_id: int, updated_team: TeamUpdate, session=Depends(get_session), user=Depends(get_current_user) ) -> Team: query = select(models.Team).where(models.Team.id == team_id) return SqlalchemyWorker(session).patch_object(query, updated_team) @team_route.delete(\"/{id}\") async def delete_team(team_id: int, session=Depends(get_session), user=Depends(get_current_user)) -> None: query = select(models.Team).where(models.Team.id == team_id) SqlalchemyWorker(session).delete_object(query) @team_route.post(\"/participant/add\") async def add_participant( updated_participant: TeamParticipantUpdate, session=Depends(get_session) ): sqlalchemy_worker = SqlalchemyWorker(session) profile_query = ( select(models.Profile) .where(models.Profile.id == updated_participant.profile_id, models.Profile.is_active == True)) team_query = select(models.Team).where(models.Team.id == updated_participant.team_id) team = sqlalchemy_worker.get_object(team_query) profile = sqlalchemy_worker.get_object(profile_query) profile.team_id = team.id session.commit() return JSONResponse(status_code=200, content={\"message\": f\"Participant {profile.user.username} add\"}) @team_route.post(\"/participant/delete\", status_code=200) async def delete_participant( updated_participant: TeamParticipantUpdate, session=Depends(get_session) ): sqlalchemy_worker = SqlalchemyWorker(session) profile_query = ( select(models.Profile) .where(models.Profile.id == updated_participant.profile_id, models.Profile.is_active == True)) team_query = select(models.Team).where(models.Team.id == updated_participant.team_id) team = sqlalchemy_worker.get_object(team_query) profile = sqlalchemy_worker.get_object(profile_query) profile.team_id = None session.commit() return JSONResponse(status_code=200, content={\"message\": f\"Participant {profile.user.username} deleted\"})","title":"team.py"},{"location":"#authpy","text":"import datetime import os import fastapi from fastapi import HTTPException from fastapi.security import HTTPBearer from passlib.context import CryptContext import jwt from src.settings.config import config class AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=['bcrypt']) secret = config.hash_password_secret def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, pwd, hashed_pwd): return self.pwd_context.verify(pwd, hashed_pwd) def encode_token(self, user_id): payload = { 'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=8), 'iat': datetime.datetime.utcnow(), 'sub': user_id } return jwt.encode(payload, self.secret, algorithm='HS256') def decode_token(self, token): try: payload = jwt.decode(token, self.secret, algorithms=['HS256']) return payload['sub'] except jwt.ExpiredSignatureError: raise HTTPException(status_code=401, detail='Expired signature') except jwt.InvalidTokenError: raise HTTPException(status_code=401, detail='Invalid token') def auth_wrapper(self, token: str = fastapi.Header(\"token\")): return self.decode_token(token)","title":"auth.py"},{"location":"#dbpy","text":"import typing from fastapi import HTTPException class SqlalchemyWorker: def __init__(self, session): self.session = session def create_object(self, created_object: typing.Any): self.session.add(created_object) self.session.commit() self.session.refresh(created_object) return created_object def get_object(self, query): response = self.session.exec(query).first() if not response: raise HTTPException(status_code=404, detail=\"Object not found\") return response def get_objects(self, query): return self.session.exec(query).all() def patch_object(self, query, updated_data): get_object = self.get_object(query) profile_data = updated_data.model_dump(exclude_unset=True) for key, value in profile_data.items(): setattr(get_object, key, value) self.session.add(get_object) self.session.commit() self.session.refresh(get_object) return get_object def delete_object(self, query): get_object = self.get_object(query) get_object.is_active = False self.session.commit()","title":"db.py"},{"location":"#_4","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 - https://github.com/mariaantonova334734/ITMO_ICT_WebDevelopment_tools_2023-2024/tree/main/students/K33422/practical_works/pr%201.1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 - https://github.com/mariaantonova334734/ITMO_ICT_WebDevelopment_tools_2023-2024/tree/main/students/K33422/practical_works/pr%201.2 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 - https://github.com/mariaantonova334734/ITMO_ICT_WebDevelopment_tools_2023-2024/tree/main/students/K33422/practical_works/pr%201.3","title":"\u0421\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"#_5","text":"\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u043d\u0430\u0432\u044b\u043a\u0438 \u043f\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI. \u0411\u044b\u043b \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u043e\u043f\u044b\u0442 \u043f\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043b\u044e\u0434\u0435\u0439 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0443.","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"index2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u0426\u0435\u043b\u044c \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u041f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b (\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043b\u044e\u0434\u0435\u0439 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0443) \u0420\u0430\u0431\u043e\u0442\u0430 \u043e \u043f\u043e\u0442\u043e\u043a\u0430\u0445, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c \u0440\u0430\u0437\u0432\u0438\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0438 \u0431\u044b\u0441\u0442\u0440\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c, \u0447\u0442\u043e \u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043e\u0431\u044a\u0435\u043c\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. \u042d\u0442\u043e\u0442 \u043e\u043f\u044b\u0442 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043a \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c, \u0433\u0434\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. threads.py import threading def calculate_sum(start, end): total = 0 for i in range(start, end): total += i return total def main(): num_threads = 4 chunk_size = 1000000 // num_threads threads = [] results = [] for i in range(num_threads): start = i * chunk_size + 1 end = (i + 1) * chunk_size + 1 thread = threading.Thread(target=lambda: results.append(calculate_sum(start, end))) threads.append(thread) thread.start() for thread in threads: thread.join() final_result = sum(results) print(final_result) if __name__ == \"__main__\": import time start_time = time.time() main() end_time = time.time() execution_time = end_time - start_time print(f\"Execution time: {execution_time} seconds\") processes.py from multiprocessing import Pool def calculate_sum(args): start, end = args total = 0 for i in range(start, end): total += i return total def distribution_pool(): p = Pool(4) result = sum(p.imap(calculate_sum, [[1, 250001], [250001, 500001], [500001, 750001], [750001, 1000001]])) return result if __name__ == \"__main__\": import time start_time = time.time() distribution_pool() end_time = time.time() execution_time = end_time - start_time print(f\"Execution time: {execution_time} seconds\") asynchronus.py import asyncio async def calculate_sum(start, end): total = 0 for i in range(start, end): total += i return total async def main(): num_tasks = 4 chunk_size = 1000000 // num_tasks tasks = [] for i in range(num_tasks): start = i * chunk_size + 1 end = (i + 1) * chunk_size + 1 task = asyncio.create_task(calculate_sum(start, end)) tasks.append(task) results = await asyncio.gather(*tasks) final_result = sum(results) print(final_result) if __name__ == \"__main__\": import time start_time = time.time() asyncio.run(main()) end_time = time.time() execution_time = end_time - start_time print(f\"Execution time: {execution_time} seconds\") \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438: \u0412\u044b\u0432\u043e\u0434 \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0430\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c, \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0430\u044f \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b, \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435, \u0447\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438.\u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u043c\u0438 \u0440\u0430\u0441\u0445\u043e\u0434\u0430\u043c\u0438 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438. \u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. threads.py def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') title = soup.title.string # \u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 conn = psycopg2.connect(\"dbname=baza3 user=moni password=123 host=localhost\") cur = conn.cursor() # \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 cur.execute(\"INSERT INTO pages_1 (url, title) VALUES (%s, %s)\", (url, title)) conn.commit() print(f\"Title of {url}: {title}\") cur.close() conn.close() def main(): urls = [\"https://platffin.com\", \"https://lamoda.ru\", \"https://olsi-trade.ru\"] threads = [] for url in urls: thread = Thread(target=parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join() if __name__ == \"__main__\": #main() import time start_time = time.time() main() end_time = time.time() execution_time = end_time - start_time print(f\"Execution time: {execution_time} seconds\") processing.py def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') title = soup.title.string # \u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 conn = psycopg2.connect(\"dbname=baza3 user=moni password=123 host=localhost\") cur = conn.cursor() # \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 cur.execute(\"INSERT INTO pages (url, title) VALUES (%s, %s)\", (url, title)) conn.commit() print(f\"Title of {url}: {title}\") cur.close() conn.close() def main(): urls = [\"https://platffin.com\", \"https://lamoda.ru\", \"https://olsi-trade.ru\"] processes = [] for url in urls: process = Process(target=parse_and_save, args=(url,)) processes.append(process) process.start() for process in processes: process.join() if __name__ == \"__main__\": import time start_time = time.time() main() end_time = time.time() execution_time = end_time - start_time print(f\"Execution time: {execution_time} seconds\") asynchronus.py def create_aiohttp_session(): return aiohttp.ClientSession() async def parse_and_save(url, session): async with session.get(url) as response: html = await response.text() soup = BeautifulSoup(html, 'html.parser') title = soup.title.string # \u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 conn = psycopg2.connect(\"dbname=baza3 user=moni password=123 host=localhost\") cur = conn.cursor() # \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 cur.execute(\"INSERT INTO pages_2 (url, title) VALUES (%s, %s)\", (url, title)) conn.commit() print(f\"Title of {url}: {title}\") cur.close() conn.close() async def main(): urls = [\"https://platffin.com\", \"https://lamoda.ru\", \"https://olsi-trade.ru\"] tasks = [] async with create_aiohttp_session() as session: for url in urls: task = asyncio.create_task(parse_and_save(url, session)) tasks.append(task) await asyncio.gather(*tasks) if __name__ == \"__main__\": import time start_time = time.time() asyncio.run(main()) end_time = time.time() execution_time = end_time - start_time print(f\"Execution time: {execution_time} seconds\") \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438: \u0412\u044b\u0432\u043e\u0434 \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0430\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c, \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0430\u044f \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b, \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435, \u0447\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438.\u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u043c\u0438 \u0440\u0430\u0441\u0445\u043e\u0434\u0430\u043c\u0438 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u044b\u0447\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0434\u0430\u0447 \u0431\u0435\u0437 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e\u0442\u043e\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u0412 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u0431\u044b\u0447\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e: \u043e\u0434\u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043e\u0434\u043d\u0430 \u0438\u0437 \u0437\u0430\u0434\u0430\u0447 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430 \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u0432\u0441\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0430\u043a\u0436\u0435 \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0442\u0441\u044f. \u0412\u044b\u0432\u043e\u0434 \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u043d\u0430\u0432\u044b\u043a\u0438 \u043f\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438, \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u0438, \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async . \u0411\u044b\u043b \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u043e\u043f\u044b\u0442 \u043f\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u0442\u043e\u043a\u043e\u0432.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2"},{"location":"index2/#2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2"},{"location":"index2/#_1","text":"\u041f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python.","title":"\u0426\u0435\u043b\u044c \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"index2/#_2","text":"\u0420\u0430\u0431\u043e\u0442\u0430 \u043e \u043f\u043e\u0442\u043e\u043a\u0430\u0445, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c \u0440\u0430\u0437\u0432\u0438\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0438 \u0431\u044b\u0441\u0442\u0440\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c, \u0447\u0442\u043e \u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043e\u0431\u044a\u0435\u043c\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. \u042d\u0442\u043e\u0442 \u043e\u043f\u044b\u0442 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043a \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c, \u0433\u0434\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b (\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043b\u044e\u0434\u0435\u0439 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0443)"},{"location":"index2/#1","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"index2/#threadspy","text":"import threading def calculate_sum(start, end): total = 0 for i in range(start, end): total += i return total def main(): num_threads = 4 chunk_size = 1000000 // num_threads threads = [] results = [] for i in range(num_threads): start = i * chunk_size + 1 end = (i + 1) * chunk_size + 1 thread = threading.Thread(target=lambda: results.append(calculate_sum(start, end))) threads.append(thread) thread.start() for thread in threads: thread.join() final_result = sum(results) print(final_result) if __name__ == \"__main__\": import time start_time = time.time() main() end_time = time.time() execution_time = end_time - start_time print(f\"Execution time: {execution_time} seconds\")","title":"threads.py"},{"location":"index2/#processespy","text":"from multiprocessing import Pool def calculate_sum(args): start, end = args total = 0 for i in range(start, end): total += i return total def distribution_pool(): p = Pool(4) result = sum(p.imap(calculate_sum, [[1, 250001], [250001, 500001], [500001, 750001], [750001, 1000001]])) return result if __name__ == \"__main__\": import time start_time = time.time() distribution_pool() end_time = time.time() execution_time = end_time - start_time print(f\"Execution time: {execution_time} seconds\")","title":"processes.py"},{"location":"index2/#asynchronuspy","text":"import asyncio async def calculate_sum(start, end): total = 0 for i in range(start, end): total += i return total async def main(): num_tasks = 4 chunk_size = 1000000 // num_tasks tasks = [] for i in range(num_tasks): start = i * chunk_size + 1 end = (i + 1) * chunk_size + 1 task = asyncio.create_task(calculate_sum(start, end)) tasks.append(task) results = await asyncio.gather(*tasks) final_result = sum(results) print(final_result) if __name__ == \"__main__\": import time start_time = time.time() asyncio.run(main()) end_time = time.time() execution_time = end_time - start_time print(f\"Execution time: {execution_time} seconds\")","title":"asynchronus.py"},{"location":"index2/#_3","text":"","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438:"},{"location":"index2/#_4","text":"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0430\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c, \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0430\u044f \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b, \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435, \u0447\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438.\u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u043c\u0438 \u0440\u0430\u0441\u0445\u043e\u0434\u0430\u043c\u0438 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438.","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"index2/#2-","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"index2/#threadspy_1","text":"def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') title = soup.title.string # \u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 conn = psycopg2.connect(\"dbname=baza3 user=moni password=123 host=localhost\") cur = conn.cursor() # \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 cur.execute(\"INSERT INTO pages_1 (url, title) VALUES (%s, %s)\", (url, title)) conn.commit() print(f\"Title of {url}: {title}\") cur.close() conn.close() def main(): urls = [\"https://platffin.com\", \"https://lamoda.ru\", \"https://olsi-trade.ru\"] threads = [] for url in urls: thread = Thread(target=parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join() if __name__ == \"__main__\": #main() import time start_time = time.time() main() end_time = time.time() execution_time = end_time - start_time print(f\"Execution time: {execution_time} seconds\")","title":"threads.py"},{"location":"index2/#processingpy","text":"def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') title = soup.title.string # \u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 conn = psycopg2.connect(\"dbname=baza3 user=moni password=123 host=localhost\") cur = conn.cursor() # \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 cur.execute(\"INSERT INTO pages (url, title) VALUES (%s, %s)\", (url, title)) conn.commit() print(f\"Title of {url}: {title}\") cur.close() conn.close() def main(): urls = [\"https://platffin.com\", \"https://lamoda.ru\", \"https://olsi-trade.ru\"] processes = [] for url in urls: process = Process(target=parse_and_save, args=(url,)) processes.append(process) process.start() for process in processes: process.join() if __name__ == \"__main__\": import time start_time = time.time() main() end_time = time.time() execution_time = end_time - start_time print(f\"Execution time: {execution_time} seconds\")","title":"processing.py"},{"location":"index2/#asynchronuspy_1","text":"def create_aiohttp_session(): return aiohttp.ClientSession() async def parse_and_save(url, session): async with session.get(url) as response: html = await response.text() soup = BeautifulSoup(html, 'html.parser') title = soup.title.string # \u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 conn = psycopg2.connect(\"dbname=baza3 user=moni password=123 host=localhost\") cur = conn.cursor() # \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 cur.execute(\"INSERT INTO pages_2 (url, title) VALUES (%s, %s)\", (url, title)) conn.commit() print(f\"Title of {url}: {title}\") cur.close() conn.close() async def main(): urls = [\"https://platffin.com\", \"https://lamoda.ru\", \"https://olsi-trade.ru\"] tasks = [] async with create_aiohttp_session() as session: for url in urls: task = asyncio.create_task(parse_and_save(url, session)) tasks.append(task) await asyncio.gather(*tasks) if __name__ == \"__main__\": import time start_time = time.time() asyncio.run(main()) end_time = time.time() execution_time = end_time - start_time print(f\"Execution time: {execution_time} seconds\")","title":"asynchronus.py"},{"location":"index2/#_5","text":"","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0438"},{"location":"index2/#_6","text":"","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438:"},{"location":"index2/#_7","text":"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0430\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c, \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0430\u044f \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b, \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435, \u0447\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438.\u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u043c\u0438 \u0440\u0430\u0441\u0445\u043e\u0434\u0430\u043c\u0438 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u044b\u0447\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0434\u0430\u0447 \u0431\u0435\u0437 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e\u0442\u043e\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u0412 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u0431\u044b\u0447\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e: \u043e\u0434\u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043e\u0434\u043d\u0430 \u0438\u0437 \u0437\u0430\u0434\u0430\u0447 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430 \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u0432\u0441\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0430\u043a\u0436\u0435 \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0442\u0441\u044f.","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"index2/#_8","text":"\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u043d\u0430\u0432\u044b\u043a\u0438 \u043f\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438, \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u0438, \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async . \u0411\u044b\u043b \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u043e\u043f\u044b\u0442 \u043f\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u0442\u043e\u043a\u043e\u0432.","title":"\u0412\u044b\u0432\u043e\u0434"}]}